// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WpfClient.CRUDAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Pessoas.
    /// </summary>
    public static partial class PessoasExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Pessoa> GetPessoas(this IPessoas operations)
            {
                return Task.Factory.StartNew(s => ((IPessoas)s).GetPessoasAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Pessoa>> GetPessoasAsync(this IPessoas operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPessoasWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pessoa'>
            /// </param>
            public static Pessoa PostPessoa(this IPessoas operations, Pessoa pessoa)
            {
                return Task.Factory.StartNew(s => ((IPessoas)s).PostPessoaAsync(pessoa), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pessoa'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pessoa> PostPessoaAsync(this IPessoas operations, Pessoa pessoa, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostPessoaWithHttpMessagesAsync(pessoa, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Pessoa GetPessoa(this IPessoas operations, int id)
            {
                return Task.Factory.StartNew(s => ((IPessoas)s).GetPessoaAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pessoa> GetPessoaAsync(this IPessoas operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPessoaWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pessoa'>
            /// </param>
            public static object PutPessoa(this IPessoas operations, int id, Pessoa pessoa)
            {
                return Task.Factory.StartNew(s => ((IPessoas)s).PutPessoaAsync(id, pessoa), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='pessoa'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutPessoaAsync(this IPessoas operations, int id, Pessoa pessoa, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutPessoaWithHttpMessagesAsync(id, pessoa, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Pessoa DeletePessoa(this IPessoas operations, int id)
            {
                return Task.Factory.StartNew(s => ((IPessoas)s).DeletePessoaAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pessoa> DeletePessoaAsync(this IPessoas operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePessoaWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
